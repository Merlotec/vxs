@compute @workgroup_size(1, 1, 1) 
fn main() {
    var i: i32 = 0i;
    var i2_: vec2<i32> = vec2(0i);
    var i3_: vec3<i32> = vec3(0i);
    var i4_: vec4<i32> = vec4(0i);
    var u: u32 = 0u;
    var u2_: vec2<u32> = vec2(0u);
    var u3_: vec3<u32> = vec3(0u);
    var u4_: vec4<u32> = vec4(0u);
    var f2_: vec2<f32> = vec2(0f);
    var f4_: vec4<f32> = vec4(0f);

    let _e28 = f4_;
    u = pack4x8snorm(_e28);
    let _e30 = f4_;
    u = pack4x8unorm(_e30);
    let _e32 = f2_;
    u = pack2x16snorm(_e32);
    let _e34 = f2_;
    u = pack2x16unorm(_e34);
    let _e36 = f2_;
    u = pack2x16float(_e36);
    let _e38 = i4_;
    u = pack4xI8(_e38);
    let _e40 = u4_;
    u = pack4xU8(_e40);
    let _e42 = i4_;
    u = pack4xI8Clamp(_e42);
    let _e44 = u4_;
    u = pack4xU8Clamp(_e44);
    let _e46 = u;
    f4_ = unpack4x8snorm(_e46);
    let _e48 = u;
    f4_ = unpack4x8unorm(_e48);
    let _e50 = u;
    f2_ = unpack2x16snorm(_e50);
    let _e52 = u;
    f2_ = unpack2x16unorm(_e52);
    let _e54 = u;
    f2_ = unpack2x16float(_e54);
    let _e56 = u;
    i4_ = unpack4xI8(_e56);
    let _e58 = u;
    u4_ = unpack4xU8(_e58);
    let _e60 = i;
    let _e61 = i;
    i = insertBits(_e60, _e61, 5u, 10u);
    let _e65 = i2_;
    let _e66 = i2_;
    i2_ = insertBits(_e65, _e66, 5u, 10u);
    let _e70 = i3_;
    let _e71 = i3_;
    i3_ = insertBits(_e70, _e71, 5u, 10u);
    let _e75 = i4_;
    let _e76 = i4_;
    i4_ = insertBits(_e75, _e76, 5u, 10u);
    let _e80 = u;
    let _e81 = u;
    u = insertBits(_e80, _e81, 5u, 10u);
    let _e85 = u2_;
    let _e86 = u2_;
    u2_ = insertBits(_e85, _e86, 5u, 10u);
    let _e90 = u3_;
    let _e91 = u3_;
    u3_ = insertBits(_e90, _e91, 5u, 10u);
    let _e95 = u4_;
    let _e96 = u4_;
    u4_ = insertBits(_e95, _e96, 5u, 10u);
    let _e100 = i;
    i = extractBits(_e100, 5u, 10u);
    let _e104 = i2_;
    i2_ = extractBits(_e104, 5u, 10u);
    let _e108 = i3_;
    i3_ = extractBits(_e108, 5u, 10u);
    let _e112 = i4_;
    i4_ = extractBits(_e112, 5u, 10u);
    let _e116 = u;
    u = extractBits(_e116, 5u, 10u);
    let _e120 = u2_;
    u2_ = extractBits(_e120, 5u, 10u);
    let _e124 = u3_;
    u3_ = extractBits(_e124, 5u, 10u);
    let _e128 = u4_;
    u4_ = extractBits(_e128, 5u, 10u);
    let _e132 = i;
    i = firstTrailingBit(_e132);
    let _e134 = u2_;
    u2_ = firstTrailingBit(_e134);
    let _e136 = i3_;
    i3_ = firstLeadingBit(_e136);
    let _e138 = u3_;
    u3_ = firstLeadingBit(_e138);
    let _e140 = i;
    i = firstLeadingBit(_e140);
    let _e142 = u;
    u = firstLeadingBit(_e142);
    let _e144 = i;
    i = countOneBits(_e144);
    let _e146 = i2_;
    i2_ = countOneBits(_e146);
    let _e148 = i3_;
    i3_ = countOneBits(_e148);
    let _e150 = i4_;
    i4_ = countOneBits(_e150);
    let _e152 = u;
    u = countOneBits(_e152);
    let _e154 = u2_;
    u2_ = countOneBits(_e154);
    let _e156 = u3_;
    u3_ = countOneBits(_e156);
    let _e158 = u4_;
    u4_ = countOneBits(_e158);
    let _e160 = i;
    i = reverseBits(_e160);
    let _e162 = i2_;
    i2_ = reverseBits(_e162);
    let _e164 = i3_;
    i3_ = reverseBits(_e164);
    let _e166 = i4_;
    i4_ = reverseBits(_e166);
    let _e168 = u;
    u = reverseBits(_e168);
    let _e170 = u2_;
    u2_ = reverseBits(_e170);
    let _e172 = u3_;
    u3_ = reverseBits(_e172);
    let _e174 = u4_;
    u4_ = reverseBits(_e174);
    return;
}
